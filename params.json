{
  "name": "Json-schema-deref-sync",
  "tagline": "Synchronous json schema dereference utility",
  "body": "# json-schema-deref-sync\r\n\r\nDereference JSON pointers in a JSON schemas with their true resolved values.\r\nBasically a lighter, synchronous version of [json-schema-deref](https://github.com/bojand/json-schema-deref) but omits web references and\r\ncustom loaders.\r\n\r\n## Installation\r\n\r\n`npm install json-schema-deref-sync`\r\n\r\n## Overview\r\n\r\nLet's say you have the following JSON Schema:\r\n\r\n```json\r\n{\r\n  \"description\": \"Just some JSON schema.\",\r\n  \"title\": \"Basic Widget\",\r\n  \"type\": \"object\",\r\n  \"definitions\": {\r\n    \"id\": {\r\n      \"description\": \"unique identifier\",\r\n      \"type\": \"string\",\r\n      \"minLength\": 1,\r\n      \"readOnly\": true\r\n    }\r\n  },\r\n  \"properties\": {\r\n    \"id\": {\r\n      \"$ref\": \"#/definitions/id\"\r\n    },\r\n    \"foo\": {\r\n      \"$ref\": \"http://www.mysite.com/myschema.json#/definitions/foo\"\r\n    },\r\n    \"bar\": {\r\n      \"$ref\": \"bar.json\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nSometimes you just want that schema to be fully expanded, with `$ref`'s being their (true) resolved values:\r\n\r\n```json\r\n{\r\n  \"description\": \"Just some JSON schema.\",\r\n  \"title\": \"Basic Widget\",\r\n  \"type\": \"object\",\r\n  \"definitions\": {\r\n    \"id\": {\r\n      \"description\": \"unique identifier\",\r\n      \"type\": \"string\",\r\n      \"minLength\": 1,\r\n      \"readOnly\": true\r\n    }\r\n  },\r\n  \"properties\": {\r\n    \"id\": {\r\n      \"description\": \"unique identifier\",\r\n      \"type\": \"string\",\r\n      \"minLength\": 1,\r\n      \"readOnly\": true\r\n    },\r\n    \"foo\": {\r\n      \"description\": \"foo property\",\r\n      \"readOnly\": true,\r\n      \"type\": \"number\"\r\n    },\r\n    \"bar\": {\r\n      \"description\": \"bar property\",\r\n      \"type\": \"boolean\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis utility lets you do that:\r\n\r\n\r\n```js\r\nvar deref = require('json-schema-deref-sync');\r\nvar myschema = require('schema.json');\r\n\r\nvar fullSchema = deref(myschema);\r\n```\r\n\r\n## API Reference\r\n\r\n<a name=\"deref\"></a>\r\n\r\n## deref(schema, options) â‡’ <code>Object</code> &#124; <code>Error</code>\r\nDerefs <code>$ref</code>'s in JSON Schema to actual resolved values. Supports local, and file refs.\r\n\r\n**Kind**: global function  \r\n**Returns**: <code>Object</code> &#124; <code>Error</code> - the deref schema oran instance of <code>Error</code> if error.  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| schema | <code>Object</code> | The JSON schema |\r\n| options | <code>Object</code> | options |\r\n| options.baseFolder | <code>String</code> | the base folder to get relative path files from. Default is <code>process.cwd()</code> |\r\n| options.failOnMissing | <code>Boolean</code> | By default missing / unresolved refs will be left as is with their ref value intact.                                        If set to <code>true</code> we will error out on first missing ref that we cannot                                        resolve. Default: <code>false</code>. |\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}